@import "./variables";

.card-container {
	display: flex;
	flex-direction: column;
	justify-content: flex-end;
	text-align: center;
	color: white;
}

.card {
	border-radius: 10px;
	background-color: white;
	box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,
		rgba(0, 0, 0, 0.3) 0px 30px 60px -30px;
	padding: 1rem;
	text-align: center;

	.top-card {
		margin-bottom: 2rem;
	}
}

.container {
	display: flex;
}

.input-component {
	display: flex;
	justify-content: center;
	flex-wrap: wrap;
}

@media screen and (max-width: 768px) {
	.container {
		flex-direction: column;
		justify-content: flex-end;
		align-items: center;
	}

	.card-container {
		width: 85%;
		max-width: 525px;
		height: 75%;
	}

	.card {
		margin-bottom: 1rem;
		height: 80%;
	}
}

.full-screen {
	height: 100vh;
	width: 100vw;
}

.primary-gradient {
	background: rgb(84, 122, 255);
	background: linear-gradient(
		36deg,
		rgba(84, 122, 255, 1) 50%,
		rgba(84, 217, 255, 1) 100%
	);
}

.danger-gradient {
	background: rgb(196, 37, 37);
	background: linear-gradient(
		322deg,
		rgba(196, 37, 37, 1) 29%,
		rgba(255, 172, 84, 1) 100%
	);
}

.success-gradient {
	background: rgb(15, 67, 15);
	background: linear-gradient(
		322deg,
		rgba(15, 67, 15, 1) 0%,
		rgba(67, 172, 67, 1) 45%
	);
}

.btn {
	position: relative;
	display: block;
	margin: 1.3rem auto;
	padding: 0;
	overflow: hidden;
	border-width: 0;
	outline: none;
	border-radius: 5px;
	background-color: $primaryColor;
	color: #ecf0f1;
	transition: background-color 0.3s;
	font-size: 10pt;

	&:hover,
	&:focus {
		background-color: $primaryColorDark;
	}

	& > * {
		position: relative;
	}

	span {
		display: block;
		padding: 10px 0;
	}
	&:before {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		display: block;
		width: 0;
		padding-top: 0;
		border-radius: 100%;
		background-color: rgba(236, 240, 241, 0.3);
		transform: translate(-50%, -50%);
	}

	&:active:before {
		width: 120%;
		padding-top: 120%;

		transition: width 0.2s ease-out, padding-top 0.2s ease-out;
	}
}

.btn-outline {
	@extend .btn;

	background-color: white;
	border: 2px solid $primaryColor;
	color: $primaryColor;

	&:hover,
	&:focus {
		background-color: $primaryColor;
		color: white;
	}
}

a {
	text-decoration: none;
	color: black;
}

label {
	display: inline-block; // to make it easier to click
	color: $primaryColor;
	cursor: pointer;
	position: relative;
	font-size: 9pt;

	// important

	// Now we'll create the checkbox object

	span {
		display: inline-block;
		position: relative;
		background-color: transparent;
		width: 15px;
		height: 15px;
		transform-origin: center;
		border: 2px solid $primaryColor;
		border-radius: 50%;
		vertical-align: -6px;
		margin-right: 10px;
		transition: background-color 150ms 200ms,
			transform 350ms cubic-bezier(0.78, -1.22, 0.17, 1.89); // custom ease effect for bouncy animation

		// Now we'll create the "tick" using pseudo elements - those will be basically two lines that will be rotated to form the "tick"

		&:before {
			content: "";
			width: 0px;
			height: 2px;
			border-radius: 2px; // so that the tick has nice rounded look
			background: $primaryColor;
			position: absolute;
			transform: rotate(45deg);
			top: 8px; // you'll need to experiment with placement depending on the dimensions you've chosen
			left: 5px; // you'll need to experiment with placement depending on the dimensions you've chosen
			transition: width 50ms ease 50ms;
			transform-origin: 0% 0%;
		}

		&:after {
			content: "";
			width: 0;
			height: 2px;
			border-radius: 2px; // so that the tick has nice rounded look
			background: $primaryColor;
			position: absolute;
			transform: rotate(305deg);
			top: 12px; // you'll need to experiment with placement depending on the dimensions you've chosen
			left: 5px; // you'll need to experiment with placement depending on the dimensions you've chosen
			transition: width 50ms ease;
			transform-origin: 0% 0%;
		}
	}
	// Time to add some life to it

	&:hover {
		span {
			&:before {
				width: 5px;
				transition: width 100ms ease;
			}

			&:after {
				width: 10px;
				transition: width 150ms ease 100ms;
			}
		}
	}
}

input[type="checkbox"] {
	display: none; // hide the system checkbox

	// Let's add some effects after the checkbox is checked

	&:checked {
		+ label {
			span {
				background-color: $primaryColor;
				transform: scale(1.25); // enlarge the box

				&:after {
					width: 10px;
					background: white;
					transition: width 150ms ease 100ms; // enlarge the tick
				}

				&:before {
					width: 5px;
					background: white;
					transition: width 150ms ease 100ms; // enlarge the tick
				}
			}

			&:hover {
				// copy the states for onMouseOver to avoid flickering
				span {
					background-color: $primaryColor;
					transform: scale(1.25); // enlarge the box

					&:after {
						width: 10px;
						background: white;
						transition: width 150ms ease 100ms; // enlarge the tick
					}

					&:before {
						width: 5px;
						background: white;
						transition: width 150ms ease 100ms; // enlarge the tick
					}
				}
			}
		}
	}
}

.dropdown {
	position: relative;
	display: inline-block;
}

.dropdown-content {
	display: none;
	position: absolute;
	background-color: #f9f9f9;
	min-width: 160px;
	box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
	transform: translateX(-30%);
	z-index: 1;

	a {
		display: flex;
		margin: 0 !important;
		padding: 5px;
		justify-content: center;
		transition: all 120ms ease 100ms;
		text-align: center;
	}

	a:hover {
		background-color: $primaryColor;
		color: white;
	}
}

.dropdown:hover .dropdown-content {
	display: block;
}
